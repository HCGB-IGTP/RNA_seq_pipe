#!/usr/bin/env python3
############################################################
## Jose F. Sanchez                                        ##
## Copyright (C) 2019-2020 Lauro Sumoy Lab, IGTP, Spain   ##
############################################################

import argparse 
import os
import sys
import RSP.modules
import HCGB.functions.aesthetics_functions as HCGB_aes

## initiate parser
parser = argparse.ArgumentParser(prog='RSP', description='RNAseq pipeline.'
      ##,epilog="(c) 2019. Jose F. Sanchez and Lauro Sumoy."
)
subparsers = parser.add_subparsers(title='Available modules', help='', metavar='')

## help options list
help_options = ('--help_format',
                '--help_project',
                '--help_trimm_adapters',
                '--help_RNAbiotype',
                '--help_multiqc')

## space
#subparser_space = subparsers.add_parser(' ', help='')

#######################
#### Configuration ####
#######################
##------------------------------ config ---------------------- ##
subparser_config = subparsers.add_parser(
    'config',
    help='Configure the pipeline',
    description='Configure dependencies, executables and additional python modules.',
)
subparser_config.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")
subparser_config.set_defaults(func=RSP.modules.config.run_config)
##-------------------------------------------------------------##

####################
#### Test RSP ####
####################
##------------------------------ test ---------------------- ##
subparser_test = subparsers.add_parser(
    'test',
    help='Test the pipeline',
    description='Test RSP pipeline with real/simulated data examples.',
)
subparser_test.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")
subparser_test.set_defaults(func=RSP.modules.test.run_test)
##-------------------------------------------------------------##
## add fake module blank to add space
subparser_space = subparsers.add_parser(' ', help='')
##-------------------------------------------------------------##

#########################
#### Prepare samples ####
#########################

##--------------------------- prepareSamples ----------------- ##
subparser_prep = subparsers.add_parser(
    'prep',
    help='Prepares FASTQ files from samples',
    description='This module prepares fastq files from a sequencing run. It could renamed, copy, link or merge them when multiples files have been generated for the same sample e.g different lanes. It concatenates these files according the common identifier and generates a unique file, one per paired-read if necessary',
)

in_out_group_prep = subparser_prep.add_argument_group("Input/Output")
in_out_group_prep.add_argument("-i", "--input", help="Folder containing the files with reads. Files could be .fastq/.fq/ or fastq.gz/.fq.gz. See --help_format for additional details. REQUIRED.", required= not any(elem in help_options for elem in sys.argv))
in_out_group_prep.add_argument("-o", "--output_folder", help="Output folder. Name for the project folder.", required= not any(elem in help_options for elem in sys.argv))
in_out_group_prep.add_argument("--single_end", action="store_true", help="Single end files [Default OFF]. Default mode is paired-end.")
in_out_group_prep.add_argument("-b", "--batch", action="store_true", help="Provide this option if input is a file containing multiple paths instead a path.")
in_out_group_prep.add_argument("--in_sample", help="File containing a list of samples to include (one per line) from input folder(s) [Default OFF].")
in_out_group_prep.add_argument("--ex_sample", help="File containing a list of samples to exclude (one per line) from input folder(s) [Default OFF].")
in_out_group_prep.add_argument("--detached", help="Isolated mode. No project folder initiated for further steps [Default OFF].")
in_out_group_prep.add_argument("--include_lane", action="store_true", help="Include the lane tag (*L00X*) in the sample identification. See --help_format for additional details. Default OFF.")
in_out_group_prep.add_argument("--include_all", action="store_true", help="IInclude all file name characters in the sample identification. See --help_format for additional details [Default OFF]")

options_group_prep = subparser_prep.add_argument_group("Options")
options_group_prep.add_argument("-t", "--threads", type=int, help="Number of CPUs to use [Default: 2].", default=2)
options_group_prep.add_argument("--copy_reads", action="store_true", help="Instead of generating symbolic links, copy files into output folder. [Default OFF].")
options_group_prep.add_argument("--merge_Reads", action="store_true", help="Merge files corresponding to the same sample. Used in combination with --include_lane and --include_all will produce different results. Please check, --help_format or https://RSP.readthedocs.io/en/latest/user_guide/info/info_index.html")
#options_group_prep.add_argument("--merge_Reads_by_lane", action="store_true", help="Merges FASTQ files for the same sample by lane (Technical replicates) [Default OFF].")
options_group_prep.add_argument("--rename", help="File containing original name and final name for each sample separated by comma. No need to provide a name for each pair if paired-end files. If provided with option '--merge', the merged files would be renamed accordingly.")

info_group_prep = subparser_prep.add_argument_group("Additional information")
info_group_prep.add_argument("--help_format", action="store_true", help="Show additional help on name format for files.")
info_group_prep.add_argument("--help_project", action="store_true", help="Show additional help on the project scheme.")
info_group_prep.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")

subparser_prep.set_defaults(func=RSP.modules.prep.run_prep)
##-------------------------------------------------------------##


##--------------------------- QC ------------------------- ##
subparser_qc = subparsers.add_parser(
    'QC',
    help='Quality check for samples',
    description='This module calls different quality check programs attending the input provided.',
)
in_out_group_qc = subparser_qc.add_argument_group("Input/Output")
in_out_group_qc.add_argument("-i", "--input", help="Folder containing input. Project or raw reads, assembly or annotation fasta files according to mode option provided.", required= not any(elem in help_options for elem in sys.argv))
in_out_group_qc.add_argument("-o", "--output_folder", help="Output folder. Required if '--detached' mode. Under '--project' mode, information will be stored following a designed scheme. See instructions for further details", required = '--detached' in sys.argv)
in_out_group_qc.add_argument("-b", "--batch", action="store_true", help="Provide this option if input is a file containing multiple paths instead a path.")
in_out_group_qc.add_argument("--in_sample", help="File containing a list of samples to include (one per line) from input folder(s) [Default OFF].")
in_out_group_qc.add_argument("--ex_sample", help="File containing a list of samples to exclude (one per line) from input folder(s) [Default OFF].")
in_out_group_qc.add_argument("--detached", action="store_true", help="Isolated mode. --input is a folder containing samples, contigs or protein sequences. Provide a unique path o several using --batch option")
in_out_group_qc.add_argument("--include_lane", action="store_true", help="Include the lane tag (*L00X*) in the sample identification. See --help_format for additional details [Default OFF]")
in_out_group_qc.add_argument("--include_all", action="store_true", help="Include all file name characters in the sample identification. See --help_format for additional details [Default OFF]")

#exclusive_group_qc_name = subparser_qc.add_argument_group("Options")

options_group_qc = subparser_qc.add_argument_group("Configuration")
options_group_qc.add_argument("--single_end", action="store_true", help="Single end files [Default OFF]. Default mode is paired-end. Only applicable if --raw_reads option.")
options_group_qc.add_argument("--skip_report", action="store_true", help="Do not report statistics using MultiQC report module [Default OFF]")
options_group_qc.add_argument("-t", "--threads", type=int, help="Number of CPUs to use [Default: 2].", default=2)

info_group_qc = subparser_qc.add_argument_group("Additional information")
info_group_qc.add_argument("--help_format", action="store_true", help="Show additional help on name format for files.")
info_group_qc.add_argument("--help_project", action="store_true", help="Show additional help on the project scheme.")
info_group_qc.add_argument("--help_multiqc", action="store_true", help="Show additional help on the multiQC module.")
info_group_qc.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")
subparser_qc.set_defaults(func=RSP.modules.qc.run_QC)
##-------------------------------------------------------------##

##------------------------------ trim ----------------------- ##
subparser_trimm = subparsers.add_parser(
    'trim',
    help='Trims sequencing adapters.',
    description='This module trims sequencing adapters that could be present in next generation sequencing files',
)
in_out_group_trimm = subparser_trimm.add_argument_group("Input/Output")
in_out_group_trimm.add_argument("-i", "--input", help="Folder containing a project or reads, according to the mode selected. Files could be .fastq/.fq/ or fastq.gz/.fq.gz. See --help_format for additional details.", required= not any(elem in help_options for elem in sys.argv))
in_out_group_trimm.add_argument("-o", "--output_folder", help="Output folder.", required = '--detached' in sys.argv)
in_out_group_trimm.add_argument("--single_end", action="store_true", help="Single end files [Default OFF]. Default mode is paired-end.")
in_out_group_trimm.add_argument("-b", "--batch", action="store_true", help="Provide this option if input is a file containing multiple paths instead a path.")
in_out_group_trimm.add_argument("--in_sample", help="File containing a list of samples to include (one per line) from input folder(s) [Default OFF].")
in_out_group_trimm.add_argument("--ex_sample", help="File containing a list of samples to exclude (one per line) from input folder(s) [Default OFF].")
in_out_group_trimm.add_argument("--detached", action="store_true", help="Isolated mode. --input is a folder containing fastq reads. Provide a unique path o several using --batch option")
in_out_group_trimm.add_argument("--include_lane", action="store_true", help="Include the lane tag (*L00X*) in the sample identification. See --help_format for additional details [Default OFF]")
in_out_group_trimm.add_argument("--include_all", action="store_true", help="Include all file name characters in the sample identification. See --help_format for additional details [Default OFF]")

options_group_trimm = subparser_trimm.add_argument_group("Options")
options_group_trimm.add_argument("--skip_report", action="store_true", help="Do not report statistics using MultiQC report module [Default OFF]. See details in --help_multiqc")
options_group_trimm.add_argument("-t", "--threads", type=int, help="Number of CPUs to use [Default: 2].", default=2)
options_group_trimm.add_argument ('-s', '--software', choices = ["trimmomatic","cutadapt"], required= not any(elem in help_options for elem in sys.argv))

parameters_group_trimm = subparser_trimm.add_argument_group("Parameters Cutadapt")
parameters_group_trimm.add_argument("--adapters_a", help="Sequence of an adapter ligated to the 3' end. See --help_trimm_adapters for further information.")
parameters_group_trimm.add_argument("--adapters_A", help="Sequence of an adapter ligated to the 3' read in pair. See --help_trimm_adapters for further information.")
parameters_group_trimm.add_argument("--min_read_len", type=int, help="Minimum length of read to maintain.", default=15)
parameters_group_trimm.add_argument("--extra", help="Provide extra options for cutadapt trimming process. See --help_trimm_adapters for further information.")

params_group_trimm = subparser_trimm.add_argument_group("Trimmomatic parameters")
params_group_trimm.add_argument("--adapters", help="Adapter sequences to use for the trimming process. See --help_trimm_adapters for further information.")
params_group_trimm.add_argument("--ILLUMINACLIP", help=".", default="2:30:10")
params_group_trimm.add_argument("--LEADING", help=".", default=11)
params_group_trimm.add_argument("--TRAILING", help=".", default=11)
params_group_trimm.add_argument("--SLIDINGWINDOW", help=".", default="4:20")
params_group_trimm.add_argument("--MINLEN", help=".", default=24)

info_group_trimm = subparser_trimm.add_argument_group("Additional information")
info_group_trimm.add_argument("--help_format", action="store_true", help="Show additional help on name format for files.")
info_group_trimm.add_argument("--help_trimm_adapters", action="store_true", help="Show additional information on trimm adapters.")
info_group_trimm.add_argument("--help_project", action="store_true", help="Show additional help on the project scheme.")
info_group_trimm.add_argument("--help_multiqc", action="store_true", help="Show additional help on the multiQC module.")
info_group_trimm.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")

subparser_trimm.set_defaults(func=RSP.modules.trim.run_trim)
##-------------------------------------------------------------##

##------------------------------ map  ----------------------- ##
subparser_map = subparsers.add_parser(
    'map',
    help='Read mapping analysis.',
    description='This module generates a mapping of the reads to a reference genome.',
)
subparser_map.set_defaults(func=RSP.modules.map.module_map)


## space
#subparser_space = subparsers.add_parser(' ', help='')

##------------------------------ RNAbiotype ----------------------- ##
subparser_RNAbiotype = subparsers.add_parser(
    'biotype',
    help='RNAbiotype analysis.',
    description='This module generates a RNA biotype analysis',
)
in_out_group_RNAbiotype = subparser_RNAbiotype.add_argument_group("Input/Output")
in_out_group_RNAbiotype.add_argument("-i", "--input", help="Folder containing a project or reads, according to the mode selected. Files could be .fastq/.fq/ or fastq.gz/.fq.gz. See --help_format for additional details.", required= not any(elem in help_options for elem in sys.argv))
in_out_group_RNAbiotype.add_argument("-o", "--output_folder", help="Output folder.", required = '--detached' in sys.argv)
in_out_group_RNAbiotype.add_argument("--single_end", action="store_true", help="Single end files [Default OFF]. Default mode is paired-end.")
in_out_group_RNAbiotype.add_argument("-b", "--batch", action="store_true", help="Provide this option if input is a file containing multiple paths instead a path.")
in_out_group_RNAbiotype.add_argument("--in_sample", help="File containing a list of samples to include (one per line) from input folder(s) [Default OFF].")
in_out_group_RNAbiotype.add_argument("--ex_sample", help="File containing a list of samples to exclude (one per line) from input folder(s) [Default OFF].")
in_out_group_RNAbiotype.add_argument("--detached", action="store_true", help="Isolated mode. --input is a folder containing fastq reads. Provide a unique path o several using --batch option")
in_out_group_RNAbiotype.add_argument("--include_lane", action="store_true", help="Include the lane tag (*L00X*) in the sample identification. See --help_format for additional details [Default OFF]")
in_out_group_RNAbiotype.add_argument("--include_all", action="store_true", help="Include all file name characters in the sample identification. See --help_format for additional details [Default OFF]")

options_group_RNAbiotype = subparser_RNAbiotype.add_argument_group("Options")
options_group_RNAbiotype.add_argument("-t", "--threads", type=int, help="Number of CPUs to use [Default: 2].", default=2)
options_group_RNAbiotype.add_argument("--annotation", help="Reference genome annotation in GTF format.", required=True)
options_group_RNAbiotype.add_argument("--limitRAM", type=int, help="limitRAM parameter for STAR mapping. Default 20 Gbytes.", default=20000000000)
options_group_RNAbiotype.add_argument("--noTrim", action='store_true', help="Use non-trimmed reads [or not containing '_trim' in the name].")
options_group_RNAbiotype.add_argument("--noJoin", action='store_true', help="Use paired-end trimmed reads for the assignment of biotypes.")
options_group_RNAbiotype.add_argument("--skip_report", action="store_true", help="Do not report statistics using MultiQC report module [Default OFF]. See details in --help_multiqc")
options_group_RNAbiotype.add_argument("--database", help="Path to store annotation files downloaded, converted, etc")

parameters_group_RNAbiotype = subparser_RNAbiotype.add_argument_group("Parameters")
parameters_group_RNAbiotype.add_argument("--no_multiMapping", action='store_true', help="Set NO to counting multimapping in the feature count. By default, multimapping reads are allowed. Default: False")
parameters_group_RNAbiotype.add_argument("--stranded", type=int, help="Select if reads are stranded [1], reverse stranded [2] or non-stranded [0], Default: 0.", default=0)

options_reference_RNAbiotype_group = subparser_RNAbiotype.add_argument_group("Reference genome")
exclusive_reference_group = options_reference_RNAbiotype_group.add_mutually_exclusive_group()
exclusive_reference_group.add_argument("--fasta", help="Reference genome to map reads.")
exclusive_reference_group.add_argument("--genomeDir", help="STAR genomeDir for reference genome.")

info_group_RNAbiotype = subparser_RNAbiotype.add_argument_group("Additional information")
info_group_RNAbiotype.add_argument("--help_format", action="store_true", help="Show additional help on name format for files.")
info_group_RNAbiotype.add_argument("--help_project", action="store_true", help="Show additional help on the project scheme.")
info_group_RNAbiotype.add_argument("--help_RNAbiotype", action="store_true", help="Show additional help on the RNAbiotype paired-end reads process.")
info_group_RNAbiotype.add_argument("--debug", action="store_true", help="Show additional message for debugging purposes.")

subparser_RNAbiotype.set_defaults(func=RSP.modules.biotype.run_biotype)
##-------------------------------------------------------------##

## space
#subparser_space = subparsers.add_parser(' ', help='')

#####
args = parser.parse_args()
if hasattr(args, 'func'):
    args.func(args)
else:
    HCGB_aes.pipeline_header('RSP')
    print("")
    parser.print_help()


##-------------    map     ------------##
#
#subparser_map = subparsers.add_parser(
#   'map',
#    help='Read mapping analysis.',
#    description='This module generates a mapping of the reads to a reference genome.',
#)


#subparser_map.add_argument('-p', '--path_reference', help = 'Directory where the reference genome is, it will be the index directory too ', required = "TRUE")
#subparser_map.add_argument('-g', '--reference_genome', help = 'Name of the file containing the reference genome', required = "TRUE")
#subparser_map.add_argument('-i', '--index', help= 'It will create a folder called as your argument', required = "TRUE")
#subparser_map.add_argument('-r', '--path_reads', help='Path to your txt with the format: $PATH/sample_name;$PATH/read1;$PATH/read or $PATH/sample_name;$PATH/read1. IT IS VERY IMRTANT TO MANTAIN THE ORDER OF THE ELEMENTS AND THAT THEY ARE SEPARATED BY ;', required = "TRUE")
#subparser_map.add_argument('-o', '--output', help= 'Path where the outputs will be created', required = "TRUE")
#subparser_map.add_argument('-t', '--threads', help = 'Choose how many threads you want to use to execute HISAT2')
#subparser_map.add_argument('-f', '--function', choices = ['Indexing', 'Mapping'], help = 'You can choose to execute the indexing function, the quantifying function or, by default, both. Possible choices for this argument: Indexing / Quantifying')
#subparser_map.add_argument ('-b', '--gtf', help = 'Path to the file with annotated transcripts in the standard GTF format.')
#subparser_map.add_argument ('-k', '--kmers', type = int, help = 'Desired k-mers length when indexing. Default: 31')
#subparser_map.add_argument ('-s', '--software', choices = ["HISAT2","STAR","Salmon","Kallisto"], required = "TRUE")

#subparser_map.set_defaults(func=RSP.modules.map.module_map) 

##--------------------------------------------##

## ------------  FeatureCounts -----------------##
#subparser_counts = suparsers.add_parser('featurecounts', help = 'Create a gene counts matrix', description = 'Counts how many reads map to genomic features, such as genes, exon, promoter and genomic bins.')

#subparser_counts.add_argument('--path_sam', help = 'Path to sam')
#subparser_counts.add_argument('--path_results', help = 'Path where you want to save your new files')
#subparser_counts.add_argument('--threads', help = 'How many threads do you want to use during this process')
#subparser_counts.add_argument('--gtf', help = 'Path to your gtf')

#subparser_counts.set_defaults(func=RSP.modules.featurecounts.run_featurecounts)




